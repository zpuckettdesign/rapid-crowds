{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zpuckett/Desktop/NextStax/rapid-crowds/src/components/VideoGroup.tsx\";\nimport { Container } from '../styles/components/VideoGroup';\nimport VideoSingle from './VideoSingle';\n\nfunction shuffleArray(arr) {\n  return arr.sort(() => Math.random() - 0.5);\n}\n\nconst VideoGroup = ({\n  data\n}) => {\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading Twitch Clone...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  const shuffledData = shuffleArray(data).slice(0, 4);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Recommended channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videos\",\n      children: shuffledData && shuffledData.map(stream => /*#__PURE__*/_jsxDEV(VideoSingle, {\n        title: stream.channel.status,\n        channel: stream.channel.display_name,\n        tags: ['English'],\n        avatar: stream.channel.logo.replace('300x300', '50x50'),\n        preview: stream.preview.medium,\n        viewers: stream.viewers\n      }, stream._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\nexport default VideoGroup;","map":{"version":3,"sources":["/Users/zpuckett/Desktop/NextStax/rapid-crowds/src/components/VideoGroup.tsx"],"names":["Container","VideoSingle","shuffleArray","arr","sort","Math","random","VideoGroup","data","shuffledData","slice","map","stream","channel","status","display_name","logo","replace","preview","medium","viewers","_id"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAqBA,SAASC,YAAT,CAAsBC,GAAtB,EAAwC;AACtC,SAAOA,GAAG,CAACC,IAAJ,CAAS,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA/B,CAAP;AACD;;AAED,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC1D,MAAI,CAACA,IAAL,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMC,YAAY,GAAGP,YAAY,CAACM,IAAD,CAAZ,CAAmBE,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAArB;AAEA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGD,YAAY,IACXA,YAAY,CAACE,GAAb,CAAkBC,MAAD,iBACf,QAAC,WAAD;AAEE,QAAA,KAAK,EAAEA,MAAM,CAACC,OAAP,CAAeC,MAFxB;AAGE,QAAA,OAAO,EAAEF,MAAM,CAACC,OAAP,CAAeE,YAH1B;AAIE,QAAA,IAAI,EAAE,CAAC,SAAD,CAJR;AAKE,QAAA,MAAM,EAAEH,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoBC,OAApB,CAA4B,SAA5B,EAAuC,OAAvC,CALV;AAME,QAAA,OAAO,EAAEL,MAAM,CAACM,OAAP,CAAeC,MAN1B;AAOE,QAAA,OAAO,EAAEP,MAAM,CAACQ;AAPlB,SACOR,MAAM,CAACS,GADd;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA1BD;;AA4BA,eAAed,UAAf","sourcesContent":["import { Container } from '../styles/components/VideoGroup';\nimport VideoSingle from './VideoSingle';\n\nexport interface VideoGroupProps {\n  data?: DataProps[];\n}\n\nexport interface DataProps {\n  _id: number;\n  viewers: number;\n  channel: {\n    status: string;\n    logo: string;\n    display_name: string;\n    url: string;\n  };\n  preview: {\n    medium: string;\n    large: string;\n  };\n}\n\nfunction shuffleArray(arr: DataProps[]) {\n  return arr.sort(() => Math.random() - 0.5);\n}\n\nconst VideoGroup: React.FC<VideoGroupProps> = ({ data }) => {\n  if (!data) {\n    return <h1>Loading Twitch Clone...</h1>;\n  }\n\n  const shuffledData = shuffleArray(data).slice(0, 4);\n\n  return (\n    <Container>\n      <strong>Recommended channels</strong>\n      <div className=\"videos\">\n        {shuffledData &&\n          shuffledData.map((stream) => (\n            <VideoSingle\n              key={stream._id}\n              title={stream.channel.status}\n              channel={stream.channel.display_name}\n              tags={['English']}\n              avatar={stream.channel.logo.replace('300x300', '50x50')}\n              preview={stream.preview.medium}\n              viewers={stream.viewers}\n            />\n          ))}\n      </div>\n    </Container>\n  );\n};\n\nexport default VideoGroup;\n"]},"metadata":{},"sourceType":"module"}